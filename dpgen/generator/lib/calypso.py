#!/usr/bin/env python3

def make_run_opt_script(jdata ) :

    ret = "import os,sys,glob,time                                                                 \n" 
    ret+= "import numpy as np                                                                      \n" 
    ret+= "from ase.io import read                                                                 \n"
    ret+= "from ase.optimize import BFGS,QuasiNewton,LBFGS                                         \n" 
    ret+= "from deepmd.calculator import DP                                                        \n" 
    ret+= "                                                                                        \n"     
    ret+= "def Get_Element_Num(elements):                                                          \n"     
    ret+= "    '''Using the Atoms.symples to Know Element&Num'''                                   \n"
    ret+= "    element = []                                                                        \n"
    ret+= "    ele = {}                                                                            \n"
    ret+= "    element.append(elements[0])                                                         \n"
    ret+= "    for x  in elements:                                                                 \n"
    ret+= "        if x not in element :                                                           \n"
    ret+= "            element.append(x)                                                           \n"
    ret+= "    for x in element:                                                                   \n"
    ret+= "        ele[x] = elements.count(x)                                                      \n"
    ret+= "    return element, ele                                                                 \n"
    ret+= "                                                                                        \n"
    ret+= "def Write_Contcar(element, ele, lat, pos):                                              \n"
    ret+= "    '''Write CONTCAR'''                                                                 \n"
    ret+= "    f = open('CONTCAR','w')                                                             \n"
    ret+= "    f.write('ASE-DPKit-Optimization\\n')                                                \n" 
    ret+= "    f.write('1.0\\n')                                                                   \n"
    ret+= "    for i in range(3):                                                                  \n"
    ret+= "        f.write('%15.10f %15.10f %15.10f\\n' % tuple(lat[i]))                           \n"
    ret+= "    for x in element:                                                                   \n"
    ret+= "        f.write(x + '  ')                                                               \n"
    ret+= "    f.write('\\n')                                                                      \n"
    ret+= "    for x in element:                                                                   \n"
    ret+= "        f.write(str(ele[x]) + '  ')                                                     \n"
    ret+= "    f.write('\\n')                                                                      \n"
    ret+= "    f.write('Direct\\n')                                                                \n"
    ret+= "    na = sum(ele.values())                                                              \n"
    ret+= "    dpos = np.dot(pos,np.linalg.inv(lat))                                               \n"
    ret+= "    for i in range(na):                                                                 \n"
    ret+= "        f.write('%15.10f %15.10f %15.10f\\n' % tuple(dpos[i]))                          \n"
    ret+= "                                                                                        \n"
    ret+= "def Write_Outcar(element, ele, volume, lat, pos, ene, force, stress,pstress):           \n"
    ret+= "    '''Write OUTCAR'''                                                                  \n"
    ret+= "    f = open('OUTCAR','w')                                                              \n"
    ret+= "    for x in element:                                                                   \n" 
    ret+= "        f.write('VRHFIN =' + str(x) + '\\n')                                            \n"
    ret+= "    f.write('ions per type =')                                                          \n"
    ret+= "    for x in element:                                                                   \n"
    ret+= "        f.write('%5d' % ele[x])                                                         \n"
    ret+= "    #f.write('\\nvolume of cell :\\n')                                                  \n"
    ret+= "    f.write('\\nDirection     XX             YY             ZZ             XY             YZ             ZX\\n') \n"
    ret+= "    f.write('in kB')                                                                    \n"
    ret+= "    f.write('%15.6f' % stress[0])                                                       \n"
    ret+= "    f.write('%15.6f' % stress[1])                                                       \n"
    ret+= "    f.write('%15.6f' % stress[2])                                                       \n"
    ret+= "    f.write('%15.6f' % stress[3])                                                       \n"
    ret+= "    f.write('%15.6f' % stress[4])                                                       \n"
    ret+= "    f.write('%15.6f' % stress[5])                                                       \n"
    ret+= "    f.write('\\n')                                                                      \n"
    ret+= "    ext_pressure = np.sum(stress[0] + stress[3] + stress[5])/3.0 - pstress              \n"
    ret+= "    f.write('external pressure = %20.6f kB    Pullay stress = %20.6f  kB\\n'% (ext_pressure, pstress))\n"
    ret+= "    f.write('volume of cell : %20.6f\\n' % volume)                                      \n"
    ret+= "    f.write('direct lattice vectors\\n')                                                \n"
    ret+= "    for i in range(3):                                                                  \n"
    ret+= "        f.write('%10.6f %10.6f %10.6f\\n' % tuple(lat[i]))                              \n"
    ret+= "    f.write('POSITION                                       TOTAL-FORCE(eV/Angst)\\n')  \n"
    ret+= "    f.write('-------------------------------------------------------------------\\n')   \n"
    ret+= "    na = sum(ele.values())                                                              \n"
    ret+= "    for i in range(na):                                                                 \n"
    ret+= "        f.write('%15.6f %15.6f %15.6f' % tuple(pos[i]))                                 \n"
    ret+= "        f.write('%15.6f %15.6f %15.6f\\n' % tuple(force[i]))                            \n"
    ret+= "    f.write('-------------------------------------------------------------------\\n')   \n"
    ret+= "    f.write('energy  without entropy= %20.6f %20.6f\\n' % (ene, ene/na))                \n"
    ret+= "    enthalpy = ene + pstress * volume / 1602.17733                                      \n"
    ret+= "    f.write('enthalpy is  TOTEN    = %20.6f %20.6f\\n' % (enthalpy, enthalpy/na))       \n"
    ret+= "                                                                                        \n"
    ret+= "def Write_calylog(templog):                                                             \n"
    ret+= "    '''For Write Evolve Structures Log into caly.log'''                                 \n"
    ret+= "    f = open('caly.log','a+')                                                           \n"
    ret+= "    f.write(templog+'\\n')                                                              \n"
    ret+= "    f.close()                                                                           \n"
    ret+= "                                                                                        \n"
    ret+= "                                                                                        \n"
    ret+= "def run_opt():                                                                          \n"
    ret+= "    '''Using the ASE&DP to Optimize Configures'''                                       \n"
    ret+= "    ''' > 600 Steps Called Failure Optimization'''                                      \n"
    ret+= "                                                                                        \n"
    ret+= "    model_path = sys.argv[1]                                                            \n"
    ret+= "    Model_List = glob.glob('%s/graph*pb'%model_path)                                    \n"
    ret+= "    calc = DP(model='%s'%(Model_List[0]))    # init the model before iteration          \n"
    ret+= "                                                                                        \n"
    ret+= "    print('Start to Optimize Structures by DP----------')                               \n"
    ret+= "                                                                                        \n"
    ret+= "    Opt_Step = 200                                                                      \n"
    ret+= "    start = time.time()                                                                 \n"
    ret+= "    to_be_opti = read('POSCAR')                                                         \n"
    ret+= "    to_be_opti.calc = calc                                                              \n"
    ret+= "    atoms_vol_2 = to_be_opti.get_volume()                                               \n"
    ret+= "    for i in range(3):                                                                  \n"
    ret+= "        opt = LBFGS(to_be_opti)                                                         \n"
    ret+= "        #opt = QuasiNewton(to_be_opti)                                                  \n"
    ret+= "        #opt = BFGS(to_be_opti)                                                         \n"
    ret+= "        #opt = BFGS(to_be_opti,trajectory='traj.traj',logfile='opt.log')                \n"
    ret+= "        opt.run(fmax=%s,steps=200)                       \n"%str(jdata.get('fmax','0.01'))
    ret+= "                                                                                        \n"
    ret+= "        atoms_lat = to_be_opti.cell                                                     \n"
    ret+= "        atoms_pos = to_be_opti.positions                                                \n"
    ret+= "        atoms_force = to_be_opti.get_forces()                                           \n"
    ret+= "        atoms_stress = to_be_opti.get_stress()                                          \n"
    ret+= "        #atoms_num = to_be_opti.get_atomic_numbers()                                    \n"
    ret+= "        atoms_symbols = to_be_opti.get_chemical_symbols()                               \n"
    ret+= "        #atoms_formula = to_be_opti.get_chemical_formula()                              \n"
    ret+= "        atoms_ene = to_be_opti.get_potential_energy()                                   \n"
    ret+= "        atoms_vol = to_be_opti.get_volume()                                             \n"
    ret+= "                                                                                        \n"
    ret+= "        element, ele = Get_Element_Num(atoms_symbols)                                   \n"
    ret+= "                                                                                        \n"
    ret+= "        Write_Contcar(element, ele, atoms_lat, atoms_pos)                               \n"
    ret+= "        Write_Outcar(element, ele, atoms_vol, atoms_lat, atoms_pos,atoms_ene, atoms_force, atoms_stress * 10.0, 0)                   \n"
    #ret+= "        if i != 2:                                                                      \n"
    #ret+= "            os.rename('POSCAR','POSCAR_%s'%i)                                           \n"
    #ret+= "            os.rename('CONTCAR','POSCAR')                                               \n"
    ret+= "                                                                                        \n"
    ret+= "    to_be_opti = read('CONTCAR')                                                        \n"
    ret+= "    to_be_opti.calc = calc                                                              \n"
    ret+= "                                                                                        \n"
    ret+= "    stop = time.time()                                                                  \n"
    ret+= "    _cwd = os.getcwd()                                                                  \n"
    ret+= "    _cwd = os.path.basename(_cwd)                                                       \n"
    ret+= "    print('%s is done, time: %s' % (_cwd,stop-start))                                   \n"
    ret+= "                                                                                        \n"
    ret+= "run_opt()                                                                               \n"
    return ret                                                                                     
                                                                                                   

                                                                                                   
                                                                                                   
                                                                                                   
                                                                                                   
